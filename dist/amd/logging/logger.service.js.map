{"version":3,"sources":["logging/logger.service.ts"],"names":[],"mappings":";;;;;;;;;;;IAKA;QAAA;QASA,CAAC;QAPA,2BAAG,GAAH,UAAI,OAAe,EAAE,OAAe,EAAE,IAAU;YAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACJ,OAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACxC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACD,OAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC;YAClC,CAAC;QACF,CAAC;QATF;YAAC,iBAAU,EAAE;;yBAAA;QAUb,oBAAC;IAAD,CATA,AASC,IAAA;IATY,qBAAa,gBASzB,CAAA;IAED;QAEC,aACS,QAAgB,EAChB,MAAqB;YADrB,aAAQ,GAAR,QAAQ,CAAQ;YAChB,WAAM,GAAN,MAAM,CAAe;QAE9B,CAAC;QAED,mBAAK,GAAL,UAAM,MAAc,EAAE,OAAgB,EAAE,IAAU;YACjD,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC;QAED,kBAAI,GAAJ,UAAK,MAAc,EAAE,OAAgB,EAAE,IAAU;YAChD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC;QAED,kBAAI,GAAJ,UAAK,MAAc,EAAE,OAAgB,EAAE,IAAU;YAChD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC;QAED,mBAAK,GAAL,UAAM,MAAc,EAAE,OAAgB,EAAE,IAAU;YACjD,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC;QAEO,iBAAG,GAAX,UAAY,IAAY,EAAE,MAAc,EAAE,OAAgB,EAAE,IAAU;YACrE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,KAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAG,EAAE,IAAI,CAAC,CAAC;QACzE,CAAC;QAEO,6BAAe,GAAvB,UAAwB,MAAc,EAAE,OAAgB;YACvD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,MAAM,CAAC,MAAI,IAAI,CAAC,QAAQ,UAAK,MAAM,UAAK,OAAS,CAAC;YACnD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,MAAM,CAAC,MAAI,IAAI,CAAC,QAAQ,UAAK,MAAM,MAAG,CAAC;YACxC,CAAC;QACF,CAAC;QACF,UAAC;IAAD,CAnCA,AAmCC,IAAA;IAnCY,WAAG,MAmCf,CAAA","file":"logger.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\n\r\nimport { ILog } from \"./logger.model\";\r\n\r\n@Injectable()\r\nexport class LoggerService {\r\n\r\n\tlog(logType: string, message: string, data?: any): void {\r\n\t\tif (data) {\r\n\t\t\t(<any>console)[logType](message, data);\r\n\t\t} else {\r\n\t\t\t(<any>console)[logType](message);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class Log implements ILog {\r\n\r\n\tconstructor(\r\n\t\tprivate sourceId: string,\r\n\t\tprivate logger: LoggerService\r\n\t) {\r\n\t}\r\n\r\n\tdebug(method: string, message?: string, data?: any): void {\r\n\t\tthis.log(\"debug\", method, message, data);\r\n\t}\r\n\r\n\tinfo(method: string, message?: string, data?: any): void {\r\n\t\tthis.log(\"info\", method, message, data);\r\n\t}\r\n\r\n\twarn(method: string, message?: string, data?: any): void {\r\n\t\tthis.log(\"warn\", method, message, data);\r\n\t}\r\n\r\n\terror(method: string, message?: string, data?: any): void {\r\n\t\tthis.log(\"error\", method, message, data);\r\n\t}\r\n\r\n\tprivate log(type: string, method: string, message?: string, data?: any) {\r\n\t\tthis.logger.log(type, `${this.buildLogMessage(method, message)}`, data);\r\n\t}\r\n\r\n\tprivate buildLogMessage(method: string, message?: string): string {\r\n\t\tif (message) {\r\n\t\t\treturn `[${this.sourceId}::${method}] ${message}`;\r\n\t\t} else {\r\n\t\t\treturn `[${this.sourceId}::${method}]`;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n"]}